name: SOUP Version Check
env:
  ENVIRONMENT_FILE: .env
  NODE_VERSION: '20.12.1'

on:
  workflow_call:
    inputs:
      flutter:
        description: 'Web Working directory for action'
        type: boolean
        default: false
      web:
        description: 'Web Working directory for action'
        type: boolean
        default: false
jobs:
  version_check:
    runs-on: [self-hosted, Linux]
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        shell: bash
        run: |
          YQ="$HOME/.local/bin/yq"
          mkdir -p "$(dirname "$YQ")"

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L -o "$YQ" https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -L -o "$YQ" https://github.com/mikefarah/yq/releases/latest/download/yq_darwin_amd64
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

          chmod +x "$YQ"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Dependencies (Flutter)
        if: inputs.flutter
        shell: bash
        run: |
          OUTPUT_FILE="dart-deps.csv"
          > "$OUTPUT_FILE"

          echo "package,version" >> "$OUTPUT_FILE"

          find . -name "pubspec.lock" | while read -r LOCK_FILE; do
              PACKAGES_JSON=$(yq -o=json eval '.packages' "$LOCK_FILE")

              echo "$PACKAGES_JSON" | jq -r 'to_entries[] | "\(.key),\(.value.version)"' >> "$OUTPUT_FILE"
          done
      - name: Dependencies (Web)
        if: inputs.web
        shell: bash
        run: |
          OUTPUT_FILE="yarn-deps.csv"
          > "$OUTPUT_FILE"
          echo "package,version" >> "$OUTPUT_FILE"

          find . -name "yarn.lock" -not -path "*/node_modules/*" -exec awk '
            /^"?[^"]*"?:$/ {
                line = $0
                sub(/:$/,"",line)
                gsub(/^"/,"",line)
                gsub(/"$/,"",line)

                n = split(line, keys, ", *")
                delete pkgnames
                for (i=1; i<=n; i++) {
                    k = keys[i]
                    gsub(/^ *"/,"",k)
                    gsub(/" *$/,"",k)

                    if (substr(k,1,1)=="@") {
                        if (match(k, /@[^\/]*\/[^@]*@/)) {
                            pkgname = substr(k, 1, RSTART + RLENGTH - 2)
                        } else {
                            pkgname = k
                        }
                    } else {
                        if (match(k, /@[^@]*$/)) {
                            pkgname = substr(k, 1, RSTART-1)
                        } else {
                            pkgname = k
                        }
                    }
                    pkgnames[pkgname] = 1
                }
                next
            }

            /^  version / {
                gsub(/^[[:space:]]*version[[:space:]]*"/,"")
                gsub(/".*$/,"")
                version = $0
                for (p in pkgnames) {
                    print p "," version
                }
                delete pkgnames
            }
          ' {} + >> "$OUTPUT_FILE"
      - name: SOUP Check
        uses: QuickBirdEng/actions/soup-version-check@main
